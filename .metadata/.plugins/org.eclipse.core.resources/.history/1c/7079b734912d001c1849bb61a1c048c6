
#ifndef INFORMES_H_
#define INFORMES_H_
#include "Clientes.h"
#include "Pedidos.h"

typedef struct
{
	int id;
	int contador;
	float acumulador;
	float promedio;
	int isEmpty;
}eAuxiliarContador;

/// @fn int ListadoDeClientesContandoSusPedidosPendientes(eClientes[], int, ePedidos[], int)
/// @brief Funcion inicial que llamara a varias funciones para terminar de mostrar la lista de clientes con la cantidad de pedidos en estado pendiente que tenga
/// @param clientes Array de Estructura que tiene las variables donde se guarda la informacion de cada cliente
/// @param tam_clientes Copia del tamanio del array de clientes
/// @param pedidos Array de Estructura con las variables que permitira guardar la informacion de cada pedido
/// @param tam_pedidos Copia del tamanio del array de la estructura de pedidos
/// @return Devuelve 0 si la funcion se realiza, sino sera -1
int ListadoDeClientesContandoSusPedidosPendientes(eClientes clientes[], int tam_clientes, ePedidos pedidos[], int tam_pedidos);

/// @fn int ContadorDePedidosPendientePorCliente(ePedidos[], int, eAuxiliarContador[], int)
/// @brief funcion que se va a encangar de contar los pedidos pendientes que tenga cada cliente en una estructura auxiliar
/// @param pedidos Array de Estructura con las variables que permitira guardar la informacion de cada pedido
/// @param tam_pedidos Copia del tamanio del array de la estructura de pedidos
/// @param pedidosPendientes estrutura auxiliar que tiene la copia del id de los clientes y su estado isEmpty
/// @param tam_pendientes Copia del tamanio de la estructura de clientes, que ahora es de la estruta auxiliar
/// @return Devuelve 0 si la funcion se realiza, sino sera -1
int ContadorDePedidosPendientePorCliente(ePedidos pedidos[], int tam_pedidos, eAuxiliarContador pedidosPendientes[], int tam_pendientes);

/// @fn int InicializarAuxiliarContador(eClientes[], int, eAuxiliarContador[])
/// @brief Funcion que se encarga de inicializar la estructura auxiliar, el id con el de los clientes, contador y acumulador a 0, y el estado isEmpty como los clientes
/// @param clientes Array de Estructura que tiene las variables donde se guarda la informacion de cada cliente
/// @param tam_clientes Copia del tamanio del array de clientes
/// @param auxiliar estrutura auxiliar que tiene la copia del id de los clientes y su estado isEmpty
/// @return Devuelve 0 si la funcion se realiza, sino sera -1
int InicializarAuxiliarContador(eClientes clientes[], int tam_clientes, eAuxiliarContador auxiliar[]);

/// @fn int MostrarListaDeClientesConSusPedidosPendientes(eClientes[], int, eAuxiliarContador[])
/// @brief
/// @param clientes Array de Estructura que tiene las variables donde se guarda la informacion de cada cliente
/// @param tam_clientes Copia del tamanio del array de clientes
/// @param pedidosPendiente
/// @return
int MostrarListaDeClientesConSusPedidosPendientes(eClientes clientes[], int tam_clientes, eAuxiliarContador pedidosPendiente[]);

/// @fn void MostrarClienteConSusPedidosPendientes(eClientes, int, eAuxiliarContador[])
/// @brief
/// @param cliente Array de Estructura que tiene las variables donde se guarda la informacion de cada cliente
/// @param tam_clientes Copia del tamanio del array de clientes
/// @param pedidosPendientes
void MostrarClienteConSusPedidosPendientes(eClientes cliente, int tam_clientes, eAuxiliarContador pedidosPendientes[]);

/// @fn void PedidoEnEstadoPerdienteConSuCliente(ePedidos, int, eClientes[])
/// @brief
/// @param pedidos
/// @param tam_clientes Copia del tamanio del array de clientes
/// @param clientes Array de Estructura que tiene las variables donde se guarda la informacion de cada cliente
void PedidoEnEstadoPerdienteConSuCliente(ePedidos pedidos, int tam_clientes, eClientes clientes[]);

/// @fn int MostrarListaDePedidosEnEstadoPendiente(ePedidos[], int, eClientes[], int)
/// @brief
/// @param pedidos Array de Estructura con las variables que permitira guardar la informacion de cada pedido
/// @param tam_pedidos Copia del tamanio del array de la estructura de pedidos
/// @param clientes Array de Estructura que tiene las variables donde se guarda la informacion de cada cliente
/// @param tam_clientes Copia del tamanio del array de clientes
/// @return
int MostrarListaDePedidosEnEstadoPendiente(ePedidos pedidos[], int tam_pedidos, eClientes clientes[], int tam_clientes);

/// @fn int ImprimirPedidosProcesadosEnEstadoCompletado(ePedidos[], int, eClientes[], int)
/// @brief
/// @param pedidos Array de Estructura con las variables que permitira guardar la informacion de cada pedido
/// @param tam_pedidos Copia del tamanio del array de la estructura de pedidos
/// @param clientes Array de Estructura que tiene las variables donde se guarda la informacion de cada cliente
/// @param tam_clientes Copia del tamanio del array de clientes
/// @return
int ImprimirPedidosProcesadosEnEstadoCompletado(ePedidos pedidos[], int tam_pedidos, eClientes clientes[], int tam_clientes);

/// @fn void PedidoEnEstadoCompletadoConInfoDeSuCliente(ePedidos, int, eClientes[])
/// @brief
/// @param pedidos
/// @param tam_clientes Copia del tamanio del array de clientes
/// @param clientes Array de Estructura que tiene las variables donde se guarda la informacion de cada cliente
void PedidoEnEstadoCompletadoConInfoDeSuCliente(ePedidos pedidos, int tam_clientes, eClientes clientes[]);

/// @fn int CantidadPedidosPendientesPorLocalidad(ePedidos[], int, eClientes[], int)
/// @brief
/// @param pedidos Array de Estructura con las variables que permitira guardar la informacion de cada pedido
/// @param tam_pedidos Copia del tamanio del array de la estructura de pedidos
/// @param clientes Array de Estructura que tiene las variables donde se guarda la informacion de cada cliente
/// @param tam_clientes Copia del tamanio del array de clientes
/// @return
int CantidadPedidosPendientesPorLocalidad (ePedidos pedidos[], int tam_pedidos, eClientes clientes[], int tam_clientes);

/// @fn int VerificarIngresoDeLocalidad(eClientes[], int, char[])
/// @brief
/// @param clientes Array de Estructura que tiene las variables donde se guarda la informacion de cada cliente
/// @param tam_clientes Copia del tamanio del array de clientes
/// @param localidadIngresada
/// @return
int VerificarIngresoDeLocalidad(eClientes clientes[], int tam_clientes, char localidadIngresada[]);

/// @fn int ContarEnListaDeClientesLasLocalidadesConPedidosPendiente(ePedidos[], eClientes, int, char[])
/// @brief
/// @param pedidos Array de Estructura con las variables que permitira guardar la informacion de cada pedido
/// @param clientes Array de Estructura que tiene las variables donde se guarda la informacion de cada cliente
/// @param tam_pedidos Copia del tamanio del array de la estructura de pedidos
/// @param localidadIngresada
/// @return
int ContarEnListaDeClientesLasLocalidadesConPedidosPendiente(ePedidos pedidos[], eClientes clientes, int tam_pedidos, char localidadIngresada[]);


int PromedioRecicladoDePolipropilenoPorCliente(eClientes clientes[], int tam_clientes, ePedidos pedidos[], int tam_pedidos);

void MostrarKilosTotalesPorClienteMasPromedio(eClientes clientes[], int tam_clientes, eAuxiliarContador auxiliar[]);

int CalculoPromedioDePolipropileno(eAuxiliarContador auxiliar[], int tam_auxiliar);

int AcumuladorDePolipropilenoConAuxiliar(ePedidos pedidos[], int tam_pedidos, eAuxiliarContador auxiliar[], int tam_auxiliar);

#endif /* INFORMES_H_ */
