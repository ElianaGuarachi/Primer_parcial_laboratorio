
#include "Pedidos.h"

int InicializarListaDePedidos(ePedidos pedidos[], int cantidad)
{
	int retorno=-1;
	if(pedidos != NULL && cantidad > 0)
	{
		for(int i=0; i<cantidad; i++)
		{
			pedidos[i].isEmpty = LIBRE;
			retorno=1;
		}
	}
	return retorno;
}

int BuscarLugarLibrePedidos(ePedidos pedidos[], int cantidad)
{
	int index;
	int i;
	index = -1;
	if(pedidos != NULL && cantidad > 0)
	{
		for(i=0; i< cantidad; i++)
		{
			if(pedidos[i].isEmpty == LIBRE)
			{
				index=i;
				break;
			}
		}
	}
	return index;
}

int BuscarPedidosPorId(ePedidos pedidos[], int cantidad, int id)
{
	int index = -1;
	int i;
	if(pedidos != NULL && cantidad>0)
	{
		for(i=0; i< cantidad; i++)
		{
			if(pedidos[i].isEmpty == OCUPADO && pedidos[i].idPedido == id)
			{
				index=i;
				break;
			}
		}
	}
	return index;
}
/*
 * 4) Crear pedido de recolección: Se imprimirán los clientes por pantalla y se pedirá que se ingrese el ID de un
 * cliente existente y la cantidad de kilos totales que se recolectarán del cliente. Se generará un ID para el pedido y
 * el mismo quedará en estado “Pendiente” hasta que se obtengan los residuos del cliente y se trasladen a la empresa.
 *
 * */

int PedidoDeRecoleccion(eClientes clientes[], int tam_clientes, ePedidos pedidos[], int tam_pedidos)
{
	int retorno=-1;
	int auxIdCliente;
	if(clientes != NULL && pedidos != NULL && tam_clientes > 0 && tam_pedidos > 0)
	{
		MostrarListaClientes(clientes, tam_clientes);
		printf("\n");
		//PedirEntero(&auxIdCliente,"\nIngrese el id de un cliente: ");

	}
	return retorno;
}
