
#include "Informes.h"

int ListadoClientesConSusPedidosPendientes(eClientes clientes[], int tam_clientes, ePedidos pedidos[], int tam_pedidos)
{
	int retorno = -1;
	eAuxiliarContador pedidosPendientes[tam_clientes];
	if(pedidos != NULL && clientes != NULL && tam_pedidos > 0 && tam_clientes > 0)
	{
		if(InicializarAuxiliarContadorDePedidosPorCliente(clientes, tam_clientes, pedidosPendientes) == 0)
		{
			if(ContadorDePedidosPendientePorCliente(pedidos, tam_pedidos, pedidosPendientes, tam_clientes) == 0)
			{
				ListaDeClientesConSusPedidosPendientes(clientes, tam_clientes, pedidosPendientes);
				retorno=0;
			}
			else
			{
				printf("\nCONTEO MALO");
			}
		}
	}

	return retorno;
}

int ContadorDePedidosPendientePorCliente(ePedidos pedidos[], int tam_pedidos, eAuxiliarContador pedidosPendientes[], int tam_pendientes)
{
	int retorno=-1;
	int i;
	int j;
	if(pedidos != NULL && tam_pedidos > 0 && tam_pendientes > 0 && pedidosPendientes != NULL)
	{
		for(j=0; j<tam_pendientes; j++)
		{
			for(i=0; i<tam_pedidos; i++)
			{
				if(pedidosPendientes[j].id == pedidos[i].idCliente && pedidos[i].estado == PENDIENTE && pedidos[i].isEmpty == OCUPADO)
				{
					pedidosPendientes[j].contador++;
					retorno = 0;
				}
			}
		}
	}
	return retorno;
}

int InicializarAuxiliarContadorDePedidosPorCliente(eClientes clientes[], int tam_clientes, eAuxiliarContador pedidosPendientes[])
{
	int retorno = -1;
	int i;
	if(clientes != NULL && pedidosPendientes != NULL && tam_clientes > 0)
	{
		for(i=0; i<tam_clientes; i++)
		{
			pedidosPendientes[i].id = clientes[i].idCliente; //se inicializa con el id de los clientes
			pedidosPendientes[i].contador = 0;
			retorno = 0;
		}
	}
	return retorno;
}


int ListaDeClientesConSusPedidosPendientes(eClientes clientes[], int tam_clientes, eAuxiliarContador pedidosPendiente[])
{
	int retorno=-1;
	int i;
	if(clientes != NULL && tam_clientes > 0  && pedidosPendiente != NULL)
	{
		for(i=0; i<tam_clientes; i++)
		{
			if(clientes[i].isEmpty == OCUPADO)
			{
				ClienteConSusPedidosPendientes(clientes[i], tam_clientes, pedidosPendiente);
				retorno = 0;
			}
		}
	}

	return retorno;
}


void ClienteConSusPedidosPendientes(eClientes cliente, int tam_clientes, eAuxiliarContador pedidosPendientes[])
{
	int i;
	if(pedidosPendientes != NULL && tam_clientes > 0)
	{
		for(i=0; i < tam_clientes; i++)
		{
			if(pedidosPendientes[i].id == cliente.idCliente)
			{
				printf("\n%5d %20s %20s %20s %5d %20s   Pedidos Pendientes: %d", cliente.idCliente, cliente.nombreEmpresa, cliente.cuit,
						cliente.direccion.calle, cliente.direccion.numero, cliente.localidad, pedidosPendientes[i].contador);
			}
		}
	}
}


/*
 * 7) Imprimir Pedidos pendientes: Se imprimirá una lista de los pedidos que se encuentren en estado “Pendiente”
 * con la información: Cuit del cliente, dirección del cliente, cantidad de kilos a recolectar.
 */

int ListaDePedidosEnEstadoPendiente(ePedidos pedidos[], int tam_pedidos, eClientes clientes[], int tam_clientes)
{
	int retorno=-1;
	int i;
	if(pedidos != NULL && clientes != NULL && tam_pedidos>0 && tam_clientes>0)
	{
		for(i=0;i<tam_pedidos;i++)
		{
			if(pedidos[i].isEmpty == OCUPADO && pedidos[i].estado == PENDIENTE) //
			{
				PedidoEnEstadoPerdienteConSuCliente(pedidos[i], tam_clientes, clientes);
				retorno=0;
			}
		}
	}
	return retorno;
}

void PedidoEnEstadoPerdienteConSuCliente(ePedidos pedidos, int tam_clientes, eClientes clientes[])
{
	int j;
	if(clientes != NULL && tam_clientes > 0)
	{
		for(j=0; j < tam_clientes; j++)
		{
			if(clientes[j].isEmpty == OCUPADO && clientes[j].idCliente == pedidos.idCliente) //
			{
				printf("\nID Pedido Pendiente: %d %20s %20s %5d %10.2f", pedidos.idPedido, clientes[j].cuit,
						clientes[j].direccion.calle, clientes[j].direccion.numero, pedidos.cantidadKilos);
			}
		}
	}
}




