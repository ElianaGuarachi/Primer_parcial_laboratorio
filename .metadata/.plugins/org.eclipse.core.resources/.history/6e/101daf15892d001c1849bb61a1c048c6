
#ifndef PEDIDOS_H_
#define PEDIDOS_H_

#include "Clientes.h"
#define PENDIENTE 1
#define COMPLETADO 2

typedef struct
{
	float pAltaDensidad;
	float pBajaDensidad;
	float polipropileno;

}eTiposResiduos;

typedef struct
{
	int idPedido;
	float cantidadKilos;
	eTiposResiduos tiposResiduos;
	int idCliente;
	int estado;
	int isEmpty;
}ePedidos;

/// @fn int InicializarListaDePedidos(ePedidos[], int)
/// @brief Funcion que se encarga de recorrer el campo isEmpty de la estructura clientes para darle el valor inicial de 0
/// @param pedidos Estructura con las variables que permitira guardar la informacion de cada pedido
/// @param cantidad Copia del tamanio del array de pedidos
/// @return Devuelve 1 si la funcion es ok, sino -1
int InicializarListaDePedidos(ePedidos pedidos[], int cantidad);

/// @fn int BuscarLugarLibrePedidos(ePedidos[], int)
/// @brief Funcion que busca un lugar libre en el array de estructura de pedidos
/// @param pedidos Estructura con las variables que permitira guardar la informacion de cada pedido
/// @param cantidad Copia del tamanio del array de pedidos
/// @return Devuelve el indice de la posicion libre encontrada, si no encontro una devuelve -1
int BuscarLugarLibrePedidos(ePedidos pedidos[], int cantidad);

/// @fn int BuscarPedidosPorId(ePedidos[], int, int)
/// @brief Funcion que se encarga de buscar en la estructura de pedidos en el campo id el valor del id que quiero
/// @param pedidos Estructura con las variables que permitira guardar la informacion de cada pedido
/// @param cantidad Copia del tamanio del array de pedidos
/// @param id Copia del id que quiero buscar
/// @return Devuelve el valor del indice que se encontro
int BuscarPedidosPorId(ePedidos pedidos[], int cantidad, int id);

/// @fn int AltaPedidoDeRecoleccion(eClientes[], int, ePedidos[], int, int*)
/// @brief
/// @param clientes Array de Estructura que tiene las variables donde se guarda la informacion de cada cliente
/// @param tam_clientes
/// @param pedidos Estructura con las variables que permitira guardar la informacion de cada pedido
/// @param tam_pedidos Copia del tamanio del array de pedidos
/// @param idPedidos
/// @return
int AltaPedidoDeRecoleccion(eClientes clientes[], int tam_clientes, ePedidos pedidos[], int tam_pedidos, int* idPedidos);

/// @fn int MostrarInfoUnPedido(ePedidos, eClientes[], int)
/// @brief
/// @param pedidos Estructura con las variables que permitira guardar la informacion de cada pedido
/// @param clientes Array de Estructura que tiene las variables donde se guarda la informacion de cada cliente
/// @param tam_clientes Copia del tamanio del array de pedidos
/// @return
int MostrarInfoUnPedido(ePedidos pedidos, eClientes clientes[], int tam_clientes);

/// @fn int MostrarListaDePedidos(ePedidos[], int, eClientes[], int)
/// @brief
/// @param pedidos Estructura con las variables que permitira guardar la informacion de cada pedido
/// @param tam_pedidos Copia del tamanio del array de pedidos
/// @param clientes Array de Estructura que tiene las variables donde se guarda la informacion de cada cliente
/// @param tam_clientes
/// @return
int MostrarListaDePedidos(ePedidos pedidos[], int tam_pedidos, eClientes clientes[], int tam_clientes);

/// @fn int ProcesarResiduos(ePedidos[], int, eClientes[], int)
/// @brief
/// @param pedidos Estructura con las variables que permitira guardar la informacion de cada pedido
/// @param tam_pedidos Copia del tamanio del array de pedidos
/// @param clientes Array de Estructura que tiene las variables donde se guarda la informacion de cada cliente
/// @param tam_clientes
/// @return
int ProcesarResiduos(ePedidos pedidos[], int tam_pedidos, eClientes clientes[], int tam_clientes);

/// @fn int VerificarIngresoDeTiposDeResiduos(ePedidos[], int)
/// @brief
/// @param pedidos Estructura con las variables que permitira guardar la informacion de cada pedido
/// @param index
/// @return
int VerificarIngresoDeTiposDeResiduos(ePedidos pedidos[], int index);

/// @fn void PedirIngresoDeTiposDeResiduosReciclados(ePedidos[], int)
/// @brief
/// @param pedidos Estructura con las variables que permitira guardar la informacion de cada pedido
/// @param index
void PedirIngresoDeTiposDeResiduosReciclados (ePedidos pedidos[], int index);



#endif /* PEDIDOS_H_ */
