
#include "Informes.h"

/*
 * 6) Imprimir Clientes: Se imprimirá una lista de clientes con todos sus datos junto con la cantidad de
 *  “pedidos de recolección” que posee en estado “Pendiente”.
 *
 */


int ListadoClientesConSusPedidosPendientes(eClientes clientes[], int tam_clientes, ePedidos pedidos[], int tam_pedidos)
{
	int retorno = -1;
	int i;
	eAuxiliarContador pedidosPendientes[tam_clientes];
	if(pedidos != NULL && clientes != NULL && tam_pedidos > 0 && tam_clientes > 0)
	{
		if(InicializarAuxiliarContadorDePedidosPorCliente(clientes, tam_clientes, pedidosPendientes)==0)
		{
			if(ContadorDePedidosPendientePorCliente(pedidos, tam_pedidos, pedidosPendientes) == 0)
			{
				ListaDeClientesConSusPedidosPendientes(clientes, tam_clientes, pedidosPendientes);
				retorno=0;
			}
		}
	}

	return retorno;
}

int ContadorDePedidosPendientePorCliente(ePedidos pedidos[], int tam_pedidos, eAuxiliarContador pedidosPendientes[], int tam_clientes)
{
	int retorno=-1;
	int i;
	int j;
	if(pedidos != NULL && tam_pedidos > 0 && pedidosPendientes != NULL)
	{
		for(i=0; i<tam_pedidos; i++)
		{
			for(j=0; j<tam_clientes; j++)
			{
				if(pedidos[i].isEmpty == OCUPADO  && pedidos[i].estado == PENDIENTE && pedidosPendientes[j].id == pedidos[i].idCliente)
				{
					pedidosPendientes[i].contador++; //conte los pedidos que tiene cada cliente en estado pendiente
					retorno = 0;
				}
			}
		}
	}
	return retorno;
}

int InicializarAuxiliarContadorDePedidosPorCliente(eClientes clientes[], int tam_clientes, eAuxiliarContador pedidosPendientes[])
{
	int retorno = -1;
	int i;
	if(clientes != NULL && pedidosPendientes != NULL && tam_clientes > 0)
	{
		for(i=0; i<tam_clientes; i++)
		{
			pedidosPendientes[i].id = clientes[i].idCliente; //se inicializa con el id de los clientes
			pedidosPendientes[i].contador = 0;
			retorno = 0;
		}
	}
	return retorno;
}


int ListaDeClientesConSusPedidosPendientes(eClientes clientes[], int tam_clientes, eAuxiliarContador pedidosPendiente[])
{
	int retorno=-1;
	int i;
	int j;
	if(clientes != NULL && tam_clientes > 0  && pedidosPendiente != NULL)
	{
		for(i=0; i<tam_clientes; i++)
		{
			if(clientes[i].isEmpty == OCUPADO && clientes[i].idCliente == pedidosPendiente[i].id)
			{
				MostrarClienteConSusPedidosPendientes(clientes[i], pedidosPendiente[i].contador);
				retorno = 0;
			}
		}
	}

	return retorno;
}


int ClienteConSusPedidosPendientes(eClientes cliente, tam_clientes, eAuxiliarContador pedidosPendientes[])
{
	int retorno = -1;
	int i;
	if(pedidosPendientes != NULL && tam_clientes > 0)
	{
		for(i=0; i<tam_clientes; i++)
		{
			if(pedidosPendientes[i].id == cliente.idCliente)
			{
				printf("\n%5d %20s %20s %20s %5d %20s   Pedidos Pendientes: %10d", cliente.idCliente, cliente.nombreEmpresa, cliente.cuit,
									cliente.direccion.calle, cliente.direccion.numero, cliente.localidad, pedidosPendientes[i].contador);
			}
		}
	}
	return retorno;
}











