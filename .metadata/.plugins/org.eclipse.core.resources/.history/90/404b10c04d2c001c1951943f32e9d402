
#include "Pedidos.h"

int InicializarListaDePedidos(ePedidos pedidos[], int cantidad)
{
	int retorno=-1;
	if(pedidos != NULL && cantidad > 0)
	{
		for(int i=0; i<cantidad; i++)
		{
			pedidos[i].isEmpty = LIBRE;
			retorno=1;
		}
	}
	return retorno;
}

int BuscarLugarLibrePedidos(ePedidos pedidos[], int cantidad)
{
	int index;
	int i;
	index = -1;
	if(pedidos != NULL && cantidad > 0)
	{
		for(i=0; i< cantidad; i++)
		{
			if(pedidos[i].isEmpty == LIBRE)
			{
				index=i;
				break;
			}
		}
	}
	return index;
}

int BuscarPedidosPorId(ePedidos pedidos[], int cantidad, int id)
{
	int index = -1;
	int i;
	if(pedidos != NULL && cantidad>0)
	{
		for(i=0; i< cantidad; i++)
		{
			if(pedidos[i].isEmpty == OCUPADO && pedidos[i].idPedido == id)
			{
				index=i;
				break;
			}
		}
	}
	return index;
}

int AltaPedidoDeRecoleccion(eClientes clientes[], int tam_clientes, ePedidos pedidos[], int tam_pedidos, int* idPedidos)
{
	int retorno=-1;
	int auxIdCliente;
	int idClienteEncontrado;
	int indexPedidoLugarLibre;
	if(clientes != NULL && pedidos != NULL && tam_clientes > 0 && tam_pedidos > 0)
	{
		MostrarListaClientes(clientes, tam_clientes);
		printf("\n");
		ObtenerEntero(&auxIdCliente, "\nIngrese el Id de un cliente: ", "\nError. Ingrese un numero para el id: ", 1, tam_clientes,1);
		idClienteEncontrado= BuscarClientePorId(clientes, tam_clientes, auxIdCliente);
		indexPedidoLugarLibre = BuscarLugarLibrePedidos(pedidos, tam_pedidos);
		if(idClienteEncontrado != -1 && indexPedidoLugarLibre != -1)
		{
				ObtenerDecimal(&pedidos[indexPedidoLugarLibre].cantidadKilos, "\nIngrese la cantidad de kilos de residuos: ",
						"\nError. Ingrese un numero valido: ", 1, 99999,1);
				pedidos[indexPedidoLugarLibre].idCliente = idClienteEncontrado;
				pedidos[indexPedidoLugarLibre].estado = PENDIENTE; //estructura?
				*idPedidos = *idPedidos+1;
				pedidos[indexPedidoLugarLibre].idPedido = *idPedidos;
				pedidos[indexPedidoLugarLibre].isEmpty = OCUPADO;
				printf("\nEl pedido fue realizado con exito.\n");
				retorno=1;
		}
		else
		{
			printf("\nNo hay un cliente con el id ingresado o no hay lugar disponible para el pedido.\n");
		}

	}
	return retorno;
}

int MostrarInfoUnPedido(ePedidos pedidos, eClientes clientes[], int tam_clientes)
{
	int retorno = -1;
	int i;
	if(clientes != NULL && tam_clientes > 0)
	{
		for(i=0; i<tam_clientes; i++)
		{
			if(clientes[i].idCliente == pedidos.idCliente)
			{
				printf("\n%5d %10.2f %10d %20s", pedidos.idPedido, pedidos.cantidadKilos, pedidos.estado, clientes[i].nombreEmpresa);
				retorno=0;
				break;
			}
		}
	}
	return retorno;
}

int MostrarListaDePedidos(ePedidos pedidos[], int tam_pedidos, eClientes clientes[], int tam_clientes)
{
	int retorno =-1;
	int i;
	if(pedidos != NULL && tam_pedidos > 0)
	{
		for(i=0; i<tam_pedidos; i++)
		{
			if(pedidos[i].isEmpty == OCUPADO)
			{
				MostrarInfoUnPedido(pedidos[i], clientes, tam_clientes);
				retorno=0;
			}
		}
	}
	return retorno;
}

/**
 * 5) Se imprimirán los pedidos por pantalla y se pedirá seleccionar el ID de uno de ellos.
 * Luego deberán ingresarse la cantidad de kilos de plástico de cada uno de los 3 tipos que la empresa puede
 *  procesar que se obtuvieron de los kilos totales que se recolectaron. Por último, se marcará al pedido como “Completado”.
 *
 */

int ProcesarResiduos(ePedidos pedidos[], int tam_pedidos, eClientes clientes[], int tam_clientes)
{
	int retorno = -1;
	int auxId;
	int indexIdPedidoEncontrado;
	if(pedidos != NULL && tam_pedidos > 0 && clientes != NULL && tam_clientes > 0)
	{
		MostrarListaDePedidos(pedidos, tam_pedidos, clientes, tam_clientes);
		printf("\n");
		ObtenerEntero(&auxId, "\nIngrese el id del pedido que fue procesado: ", "\nError. Ingrese un numero valido", 1, tam_pedidos, 1);
		indexIdPedidoEncontrado = BuscarPedidosPorId(pedidos, tam_pedidos, auxId);
		if(indexIdPedidoEncontrado != -1)
		{
			ObtenerDecimal(&pedidos[indexIdPedidoEncontrado].tiposResiduos.pAltaDensidad,
					"\nIngrese cantidad de kilos de HDPE (alta densidad): ", "\nError. Ingrese un numero valido: ", 1, 99999,1);
			ObtenerDecimal(&pedidos[indexIdPedidoEncontrado].tiposResiduos.pBajaDensidad,
					"\nIngrese cantidad de kilos de HDPE (alta densidad): ", "\nError. Ingrese un numero valido: ", 1, 99999,1);
			ObtenerDecimal(&pedidos[indexIdPedidoEncontrado].tiposResiduos.polipropileno,
					"\nIngrese cantidad de kilos de HDPE (alta densidad): ", "\nError. Ingrese un numero valido: ", 1, 99999,1);

			if(VerificarIngresoDeTiposDeResiduos(pedidos, indexIdPedidoEncontrado)==0)
			{
				pedidos[indexIdPedidoEncontrado].estado = COMPLETADO;
				printf("\nEl ingreso de la cantidad de plastico reciclado fue realizado con exito\n");
				retorno=0;
			}
			else
			{
				pedidos[indexIdPedidoEncontrado].tiposResiduos.pAltaDensidad = 0;
				pedidos[indexIdPedidoEncontrado].tiposResiduos.pBajaDensidad = 0;
				pedidos[indexIdPedidoEncontrado].tiposResiduos.polipropileno = 0;
				printf("\nDebera volver a comerzar");
			}
		}
		else
		{
			printf("\nNo hay pedidos con el Id ingresado\n");
		}
	}
	return retorno;
}

int VerificarIngresoDeTiposDeResiduos(ePedidos pedidos[], int indexIdPedidoEncontrado)
{
	int retorno=0;
	float sumaDeKilos;
	if(pedidos != NULL)
	{
		sumaDeKilos= pedidos[indexIdPedidoEncontrado].tiposResiduos.pAltaDensidad +
				pedidos[indexIdPedidoEncontrado].tiposResiduos.pBajaDensidad +
				pedidos[indexIdPedidoEncontrado].tiposResiduos.polipropileno;
		if(sumaDeKilos > pedidos[indexIdPedidoEncontrado].cantidadKilos)
		{
			printf("\nNo puede haber mas kilos de plasticos reciclados de la cantidad total que se ingreso\n");
			retorno=-1;
		}
	}

	return retorno;
}






